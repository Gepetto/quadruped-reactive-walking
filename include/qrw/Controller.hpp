///////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \brief This is the header for Controller class
///
/// \details Handle the communication between the blocks of the control architecture
///
//////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CONTROLLER_H_INCLUDED
#define CONTROLLER_H_INCLUDED

#include <odri_control_interface/robot.hpp>
#include "pinocchio/math/rpy.hpp"
#include <Eigen/Core>
#include <Eigen/Dense>
#include <cmath>
#include <fstream>
#include <iostream>
#include <string>
#include "qrw/Params.hpp"
#include "qrw/Types.h"

class Controller {
 public:
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Constructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  Controller();

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Initialize with given data
  ///
  /// \param[in] params Object that stores parameters
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  void initialize(Params& params);

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Destructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ~Controller() {}  // Empty destructor

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Compute one iteration of control loop
  ///
  /// \param[in] robot Pointer to the robot interface
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  void compute(std::shared_ptr<odri_control_interface::Robot> robot);

  // Commands to be sent to the robot
  Vector12 P;
  Vector12 D;
  Vector12 q_des;
  Vector12 v_des;
  Vector12 tau_ff;
  double FF;

  // Control info
  Params* params_;  // Params object to store parameters
  bool error;
  
 private:
  
  double test = 0;
};

#endif  // CONTROLLER_H_INCLUDED
