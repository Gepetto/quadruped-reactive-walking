///////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \brief This is the header for FakeRobot class
///
/// \details Create a fake robot object for debug purpose
///
//////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef FAKEROBOT_H_INCLUDED
#define FAKEROBOT_H_INCLUDED

#include <Eigen/Core>
#include <Eigen/Dense>
#include "qrw/Types.h"

class FakeRobot {
 public:
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Constructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  FakeRobot();

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Destructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ~FakeRobot() {}  // Empty destructor

  // Fake functions
  void Initialize(Vector12 const& des_pos) {}
  void ParseSensorData() {}
  void SendCommandAndWaitEndOfCycle(double dt) {}

  FakeJoints* joints = new FakeJoints();
  FakeImu* imu = new FakeImu();

};

class FakeJoints {
 public:
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Constructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  FakeJoints();

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Destructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ~FakeJoints() {}  // Empty destructor

  // Fake functions
  void PrintVector() {}
  void SetZeroCommands() {}
  Vector12 GetPositions() { return Vector12::Zero(); }
  Vector12 GetVelocities() { return Vector12::Zero(); }
  void SetPositionGains(Vector12 const& data) {}
  void SetVelocityGains(Vector12 const& data) {}
  void SetDesiredPositions(Vector12 const& data) {}
  void SetDesiredVelocities(Vector12 const& data) {}
  void SetTorques(Vector12 const& data) {}

};

class FakeImu {
 public:
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Constructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  FakeImu();

  ////////////////////////////////////////////////////////////////////////////////////////////////
  ///
  /// \brief Destructor
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////
  ~FakeImu() {}  // Empty destructor

  // Fake functions
  Vector12 GetLinearAcceleration() { return Vector12::Zero(); }
  Vector12 GetGyroscope() { return Vector12::Zero(); }
  Vector12 GetAttitudeEuler() { return Vector12::Zero(); }

};

#endif  // FAKEROBOT_H_INCLUDED
